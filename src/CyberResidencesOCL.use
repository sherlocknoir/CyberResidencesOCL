-------------------------------------------------------------------------------
--                           CyberResidencesOCL.use
-------------------------------------------------------------------------------

model CyberResidences


enum Category {
    economy,
    standard,
    premium,
    prestige
}


enum Gender {
    male,
    female
}


class Residence
attributes
    name     : String
    floorMin : Integer
    floorMax : Integer
    category : Category
    maxNbOfFreeUnits : Integer -- @derived
    avgRate : Real             -- @derived
operations
    -- Set of bedrooms of the residence.
    bedrooms() : Set(Bedroom) =
        rooms->select(oclIsKindOf(Bedroom))->oclAsType(Set(Bedroom))
    -- Set of useful bedrooms.
    usefulBedrooms() : Set(Bedroom) =
        bedrooms()->select(not isOutOfOrder)
    -- Set of residence bathrooms
    bathrooms() : Set(Bathroom) =
        rooms->select(oclIsKindOf(Bathroom))->oclAsType(Set(Bathroom))
end


class Room
attributes
    number : Integer
    floor : Integer -- @derived
    isOutOfOrder : Boolean
end


class Bathroom < Room
attributes
    isOnTheLanding : Boolean -- @derived
end

class Bedroom < Room
attributes
    nbOfSingleBeds : Integer
    nbOfDoubleBeds : Integer
    rate : Real
    isNonSmoking : Boolean
    nbOfUnits : Integer
end
class Person 
attributes
    name : String
    age : Integer
    gender : Gender
end



class Resident < Person
attributes
    isSmoker : Boolean
end

-- pourquoi il y a un / avant le variable?
class Tenant < Resident
attributes
    paidRate : Real
end



class Discount
attributes
    percentage : Integer
    label : String
end

-- TODO

-- For association classes use the following syntax
-- (see documentation for more details)
-- associationclass ... between
--     ...[...] role ...
--     ...[...] role ...
-- attributes
--     ...
-- end

associationclass Rent
    between
        Bedroom[1..*] role rentedBedrooms
        Tenant[0..1] role tenant
attributes
    discount : Real --@derived
    rate : Real --@dervided
end
        
composition HasDiscounts
    between
        Rent[1] role rent
        Discount[*] role discounts
end



composition ContainsRooms between
    Residence[1] role residence
    Room[*] role rooms
end

association IsInBedroom between
Bathroom[0..3] role bathrooms
Bedroom[0..1] role bedroom
end

association IsOccupiedBy between
Bedroom[1] role occupiedRoom
Resident[*] role occupants
end

association IsMarriedWith between
Resident[0..1] role consort
Resident[0..1] 
end

association IsTutoredBy between
Resident[0..2] role tutors
Resident[*] role tutored
end




constraints


-------------------------------------------------------------------------------
--                           aboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "All Bathrooms Out Of Order" (ABOOO).
-- Note Easy. Use 'one'. Should work with 'xxxPercentage'

 context Rent inv aboooConditions:
    -- A discount is given for bedrooms that have all bathrooms out of
    -- order. The label of this type of discount is 'BROOO50'. This
    -- rule does not apply in economy residences.

    self.rentedBedrooms.bathrooms->size() = self.rentedBedrooms.bathrooms.select(isOutOfOrder = true)->size() and
    self.rentedBedrooms.residence.category <> Category::economy 
    implies self.discounts->one(label = 'BROOO50')

-------------------------------------------------------------------------------
--                              aboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "ABOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

context Discount inv aboooPercentage:
    -- ABOO discounts are equal to 50%. 

    self.label = 'BROOO50' implies self.percentage = 50

-------------------------------------------------------------------------------
--         DONE    KO:OK                    adultMarried
-------------------------------------------------------------------------------
-- Only adult married.
-- Easy. Use 'implies'

context Resident inv adultMarried:
    self.consort -> notEmpty implies self.age >= 18
    -- To be registered as married, resident must be adult.


-------------------------------------------------------------------------------
--    DONE ko:ok                             adultTenant
-------------------------------------------------------------------------------
-- Tenants are adults.
-- Easy

 context Tenant inv adultTenant:
    self.age >= 18
    -- The minimal age to rent a bedroom is 18 years old.


-------------------------------------------------------------------------------
--    DONE KO:OK           allPrestigeBathrooms
-------------------------------------------------------------------------------
-- Invariant about all bathrooms for 'prestige' residence.
-- Medium. use 'implies'.

context Residence inv allPrestigeBathrooms:
self.category=Category::prestige and self.bedrooms()->notEmpty() implies self.bedrooms()->forAll(b | (b.nbOfSingleBeds+b.nbOfDoubleBeds)<=b.bathrooms->size())
    -- Residences of category prestige have in each bedroom at least
    -- the same number of bathroom than the number of beds.


-------------------------------------------------------------------------------
--   DONE    KO:OK                          atLeastABed
-------------------------------------------------------------------------------
-- At least one bed for useful bedrooms.
-- Easy. Use implies.

context Bedroom inv atLeastABed:
       not self.isOutOfOrder  implies
        self.nbOfSingleBeds > 0 or self.nbOfDoubleBeds > 0
    -- Bedrooms that are not out of order must have at least one bed.


-------------------------------------------------------------------------------
--   DONE  KO:OK                           atLeastOneAdult
-------------------------------------------------------------------------------
-- At least one adult per room.
-- Easy. Use 'implies'

context Bedroom inv atLeastOneAdult:
   self.occupants -> notEmpty() implies self.occupants->select(age >= 18) ->notEmpty()
    -- At least one adult must be presented in all occupied rooms.


-------------------------------------------------------------------------------
--      DONE KO:OK                        childNonSmoking
-------------------------------------------------------------------------------
-- Non smoking child.
-- Easy


 context Resident inv childNonSmoking:
  self.age < 18 implies not self.isSmoker 
    -- Children are always declared as non smoker.


-------------------------------------------------------------------------------
--    DONE KO:OK                          childTutored
-------------------------------------------------------------------------------
-- Child tutored.
-- Medium

 context Resident inv childTutored:
    self.occupiedRoom.residence.category <> Category:: prestige and self.age < 18 implies self.tutors->notEmpty()

    -- Resident that are less than 18 years old must have at least one
    -- tutor, apart in prestige residences where this rule does not
    -- apply.


-------------------------------------------------------------------------------
--   DONE KO:OK       cumulatedDiscounts
-------------------------------------------------------------------------------
-- Limit of cumulated discounts.
-- Easy. Use 'sum'

context Rent inv cumulatedDiscounts:
    self.discounts.percentage->sum() <= 70
    -- No room will have more that 70% of dicounts cumulated.


-------------------------------------------------------------------------------
--     DONE KO:OK                 deriveAvgRate
-------------------------------------------------------------------------------
-- Derivation of the avgRate attribute.
-- Medium

context Residence inv deriveAvgRate:
(self.bedrooms().occupants->size() = 0) implies self. avgRate = 0
or self.avgRate =self.bedrooms()->select(rent->notEmpty).rent.rate->sum()
 / (self.bedrooms().occupants->select(tutors->isEmpty())->size())
    -- The average rate of a residence is the total revenue of the
    -- residence divided by the number of occupants. Tutored residents
    -- do not count in this rule.


-------------------------------------------------------------------------------
--  DONE KO:OK                            deriveDiscount
-------------------------------------------------------------------------------
-- Derivation of the attribute discount.
-- Easy

context Rent inv deriveDiscount:
 self.discount = self.rentedBedrooms.rate*(self.discounts.percentage->sum() / 100)
  
    -- The discount for a rent, is the rate of the bedroom multiplied
    -- by the sum of percentages of all discounts.


-------------------------------------------------------------------------------
--  DONE   KO OK                            deriveFloor
-------------------------------------------------------------------------------
-- Derivation of the attribute floor.
-- Easy

context Room inv deriveFloor:
    self.floor = self.number div 100
    -- The floor number correspond to the first digits of the room
    -- number, where the last two digits are removed. For instance the
    -- room 634 is at the floor 6.


-------------------------------------------------------------------------------
--  DONE KO:OK                   deriveIsOnTheLanding
-------------------------------------------------------------------------------
-- Derivation of isOnTheLanding attribute.
-- Easy

context Bathroom inv deriveIsOnTheLanding:
 
    self.isOnTheLanding implies self.bedroom->isEmpty()
    -- A bathroom is said to be on the landing if it is not in a
    -- bedroom.


-------------------------------------------------------------------------------
--  DONE KO: OK                         deriveMaxNbOfFreeUnits
-------------------------------------------------------------------------------
-- Derivation of maxNbOfFreeUnits attribute.
-- Easy

context Residence inv deriveMaxNbOfFreeUnits:
self.maxNbOfFreeUnits = self.bedrooms().nbOfUnits->sum() 
    -- The maximum number of free units is equal to the maximum number
    -- of places in beds of all rooms of the residence.


-------------------------------------------------------------------------------
--   DONE KO: OK                        deriveNbOfUnits
-------------------------------------------------------------------------------
-- Derivation of nbOfUnits attribute.
-- Easy

context Bedroom inv deriveNbOfUnits:
self.nbOfUnits = self.nbOfSingleBeds + (2*nbOfDoubleBeds)
    -- The number of units of a bedroom is the maximum number of
    -- people that can fit within the bedroom assuming that all places
    -- in all beds are full.


-------------------------------------------------------------------------------
--                                derivePaidRate
-------------------------------------------------------------------------------
-- Derivation of the attribute paidRate.
-- Not Easy. Use 'if ... then ... else ... endif'   and
-- 'let groupFloors : Set(Integer) = ... in ...'

--context Tenant inv derivePaidRate:
    -- The total amount paid by a tenant is the sum of rent rates for
    -- all bedrooms rented. If the members of his or her group is
    -- spread over more than one floor, then 20€ of reduction will
    -- automatically be deduced.
--if let groupFloors : Set(Integer) = self.rentedBedrooms.floor->asSet(), oneFloor : Integer = 1 in (groupFloors->size()) > oneFloor 
--then
  --  self.paidRate = self.rentedBedrooms.rate->sum() - 20
--else
 --   self.paidRate = self.rentedBedrooms.rate->sum()
--endif


-------------------------------------------------------------------------------
--    DONE ko:oK                            deriveRate
-------------------------------------------------------------------------------
-- Derivation of the attribute rate.
-- Easy

context Rent inv deriveRate:
 self.rate = self.rentedBedrooms.rate-self.discount
    -- The rate of a rent corresponds to the regular rate for the room
    -- minus the discount.


-------------------------------------------------------------------------------
--      DONE   KO:OK                      domainPercentage
-------------------------------------------------------------------------------
-- Domain of percentage attribute.
-- Easy

 context Discount inv domainPercentage:
        self.percentage >= 1 and self.percentage <= 100
    -- The percentage is a value between 1 and 100.


-------------------------------------------------------------------------------
--      DOESNT WORK                    enoughBathroomsInPrestige
-------------------------------------------------------------------------------
-- At least as many bathrooms as beds for prestige residence.
-- Easy. Use implies.

context Bedroom inv enoughBathroomsInPrestige:
--self.residence.category=Category::prestige implies 
--self.residence.bathrooms()->collect(isOnTheLanding=false)->size()>=(self.nbOfSingleBeds+self.nbOfDoubleBeds)
self.residence.category=Category::prestige  implies self.residence.bedrooms()->forAll(b | (b.nbOfSingleBeds+b.nbOfDoubleBeds)<=self.bathrooms->size())
    -- In a prestige residence, the number of private bathrooms is at
    -- least the same as the number of beds in each bedroom.
   -- self.residence.category = Category::economy 
    --implies self.bathrooms->size() >= self.nbOfSingleBeds + self.nbOfDoubleBeds


-------------------------------------------------------------------------------
--  DONE  KO:OK                        floorBetweenMinAndMax
-------------------------------------------------------------------------------
-- Floor between minimum and maximum floors.
-- Easy

context Room inv floorBetweenMinAndMax:
    self.floor <= self.residence.floorMax and 
    self.floor >= self.residence.floorMin
    -- The floor of a room is between the minium and maximum floor of
    -- the residence.


-------------------------------------------------------------------------------
--       DONE   KO:OK                        floorOrder
-------------------------------------------------------------------------------
-- Order between floorMin and floorMax attributes.
-- Easy

 context Residence inv floorOrder:
    self.floorMax >= self.floorMin
    -- The maximum floor is at higher or at the same level that the
    -- minimum floor of the residence.


-------------------------------------------------------------------------------
--    DONE KO:OK                    labelUnique
-------------------------------------------------------------------------------
-- Uniqueness of labels with respect to rents.
-- Easy. Use 'unique'

context Rent inv labelUnique:
    self.discounts->isUnique(label)
    -- All discounts associated to a rent have distinct labels.


-------------------------------------------------------------------------------
--  DONE   KO:OK                      marriageAntiReflexivity
-------------------------------------------------------------------------------
-- Anti-reflexivity of marriage relationship.
-- Easy

context Resident inv marriageAntiReflexivity:
    self.consort -> notEmpty implies self.consort <> self
    -- A resident cannot mary with himself or herself.


-------------------------------------------------------------------------------
--                             marriageInSameGroup
-------------------------------------------------------------------------------
-- Consorts in the same group.
-- Medium

context Resident inv marriageInSameGroup:
    -- A resident and his or her consort occupies a room of the same
    -- group.
    self.consort->size() = 1
    implies
        self.occupiedRoom.tenant = self.consort.occupiedRoom.tenant
    

-------------------------------------------------------------------------------
--     DONE   KO OK                       marriageSymmetry
-------------------------------------------------------------------------------
-- Symmetry of marriage relationship.
-- Easy

context Resident inv marriageSymmetry:
    self.consort -> notEmpty implies self = self.consort.consort
    -- If a resident is declared to be the consort of another
    -- resident, then the opposite is true as well.


-------------------------------------------------------------------------------
--  DONE KO:OK                          noBedroomOverload
-------------------------------------------------------------------------------
-- No bedroom overloaded.
-- Medium

context Bedroom inv noBedroomOverload:
 self.occupants->select(age > 3)->size() <= self.nbOfUnits
    -- There must be no more people in a bedroom than the number of
    -- units of this bedroom. Children up to 3 years old are not
    -- counted in this rule.


-------------------------------------------------------------------------------
--  DONE KO:OK          noEmptyRentedBedrooms
-------------------------------------------------------------------------------
-- Rented bedrooms not empty.
-- Easy. Use 'implies'

context Bedroom inv noEmptyRentedBedrooms:
     self.tenant <> Undefined or self.tenant->notEmpty() implies self.occupants->notEmpty()
    -- All rented bedrooms are occupied by at least one occupant.


-------------------------------------------------------------------------------
--    DONE KO:OK                             noSquaters
-------------------------------------------------------------------------------
-- Nobody in rooms not rented.
-- Easy. Use 'implies'

context Bedroom inv noSquaters:
     self.occupants->notEmpty() implies self.tenant <> Undefined or self.tenant->notEmpty() 
    -- Occupants must be exclusively in rooms that are rented by
    -- somebody.


-------------------------------------------------------------------------------
--      DONE KO:OK                         noTutorForAdults
-------------------------------------------------------------------------------
-- No tutor for adults.
-- Easy

 context Resident inv noTutorForAdults:
    self.age >= 18 implies self.tutors->isEmpty()
    -- Adults never have tutor.


-------------------------------------------------------------------------------
--  DONE KO:OK           oooBedroomsNotRented
-------------------------------------------------------------------------------
-- No rental of Out Of Order bedrooms.
-- Easy

context Bedroom inv oooBedroomsNotRented:
    self.isOutOfOrder implies self.tenant = Undefined or self.tenant->isEmpty()
    -- Bedrooms that are out of order cannot be rented.


-------------------------------------------------------------------------------
--                                oooIfPrestige
-------------------------------------------------------------------------------
-- Out of order bathroom implications if prestige. 
-- Medium. Use 'implies'

context Bathroom inv oooIfPrestige:
    -- In prestige residences, it is not acceptable to rent bedrooms
    -- with bathrooms that are out of order. So if a bathroom is marked
    -- as out of order, the corresponding bedroom is also marked as
    -- out of order.
    self.residence.category = Category::prestige
    and 
    self.isOutOfOrder = true
    implies
    self.bedroom.isOutOfOrder = true

-------------------------------------------------------------------------------
--    DONE KO:OK                          rentInOneResidence
-------------------------------------------------------------------------------
-- Medium. Should be rather short.
-- <Enter note text here>

context Tenant inv rentInOneResidence:
self.rentedBedrooms->notEmpty() implies self.rentedBedrooms->forAll(b | self.rentedBedrooms->forAll(b2| b2.residence = b.residence))
    -- For a given tenant, all rented bedrooms are in the same
    -- residence.


-------------------------------------------------------------------------------
--      Done   KO:OK                    sameNumberIfPrivate
-------------------------------------------------------------------------------
-- Same number if private.
-- Easy. Use 'implies'.

context Bathroom inv sameNumberIfPrivate:
not self.isOnTheLanding implies self.number = self.bedroom.number
    -- All bathrooms that are not on the landing, that is that are
    -- private to a bedroom, have the same number of room as this
    -- bedroom.


-------------------------------------------------------------------------------
--                               sboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "Some Bathrooms Out Of Order" (SBOOO).
-- Not Easy. Use 'one'. Should world with 'xxxPercentage'

context Rent inv sboooConditions:
    -- A discount if given for a bed room if there are "Some Bathrooms
    -- Out Of Order", that is for bedroom with at least one bathroom
    -- out of order, but at least one bathroom still available.  The
    -- label for this type of discount is SBOO. This type of discount
    -- does not apply on economy residences.
    
    self.rentedBedrooms.bathrooms->size() >= 2
    and self.rentedBedrooms.bathrooms.isOutOfOrder->size() >=1
    and self.rentedBedrooms.bathrooms.isOutOfOrder->size() < self.rentedBedrooms.bathrooms->size()
    and self.rentedBedrooms.residence.category <> Category::economy 
    implies self.discounts->one(label = 'SBOO')

-------------------------------------------------------------------------------
--                               sboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "SBOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

context Discount inv sboooPercentage:
    -- In premium residences, SBOO discounts are equal to 25%. For
    -- standard category the discount is of 10%.
    self.label = 'SBOOO' and
    (
        (self.rent.rentedBedrooms.residence.category = Category::premium
        implies
        self.percentage = 25)
        or
        (self.rent.rentedBedrooms.residence.category = Category::standard
        implies
        self.percentage = 10)
    )
-------------------------------------------------------------------------------
--  DONE KO:OK                    smokingPremiumPolicy
-------------------------------------------------------------------------------
-- Smoking policy for premium residences.
-- Not easy

context Bedroom inv smokingPremiumPolicy:
self.residence.category = Category::premium and self.isNonSmoking = false implies self.occupants->forAll(o|o.isSmoker =true)
    -- In a premium residence a resident that specified that he or she
    -- is non smoker will never ever be place in a smoking room.


-------------------------------------------------------------------------------
--       DONE KO:OK                    smokingPrestigePolicy
-------------------------------------------------------------------------------
-- No smoking is prestige.
-- Easy

context Bedroom inv smokingPrestigePolicy:
   self.residence.category = Category::prestige implies self.isNonSmoking = true
    -- There are no smoking rooms at all in residence of prestige.


-------------------------------------------------------------------------------
--   DONE KO :OK                           tenantInRentedRoom
-------------------------------------------------------------------------------
-- Room occupied by the tenant.
-- Medium. 

context Tenant inv tenantInRentedRoom:
 self.rentedBedrooms->notEmpty() implies self.rentedBedrooms->exists(r|r.occupants->exists(o|o =self))
  
    -- A tenant occupies one of the bedroom that he or she has rented.


-------------------------------------------------------------------------------
--   DONE  KO:OK                             tutorAdult
-------------------------------------------------------------------------------
-- Tutors are adults.
-- Easy

context Resident inv tutorAdult:
    self.tutored -> notEmpty() implies self.age >= 18
    
    -- A resident can not be the tutor of another resident if he or
    -- she is not an adult.


-------------------------------------------------------------------------------
--                               tutorInSameGroup
-------------------------------------------------------------------------------
-- Tutors and tutored in one group.
-- Medium

context Resident inv tutorInSameGroup:
    -- The tutors of a resident are in the same group as this
    -- resident. In other words they are all in the same group of
    -- rooms.
    self.tutored-> forAll(t | t.occupiedRoom.tenant = self.occupiedRoom.tenant)

-------------------------------------------------------------------------------
--   Doesnt work         uniqueNumberApartForPrivateBathroom
-------------------------------------------------------------------------------
-- Invariant on room numbering.
-- Medium

context Residence inv uniqueNumberApartForPrivateBathroom:
    -- All rooms have a distinct number, except private bathrooms.

    self.bedrooms().select(bedroom | bedroom.bathrooms->size()>0).isUnique(number)
